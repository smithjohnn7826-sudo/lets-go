name: ðŸš€ 6-Hour SSHX Discord Notifier

# -----------------------------------------------------------------
# 1. EVENT TRIGGERS (Defines WHEN the job runs)
# - schedule: Restarts the job before the 6-hour limit (at 5.5 hour intervals)
# - workflow_dispatch: Allows manual start from the Actions tab
# -----------------------------------------------------------------
on:
  # Runs at 30 minutes past 0, 5, 11, 16, and 22 o'clock UTC
  # This provides roughly 5.5 hour intervals, ensuring a restart before the 6-hour limit.
  schedule:
    - cron: '30 0,5,11,16,22 * * *'
    
  # Allows you to manually trigger the workflow
  workflow_dispatch:

# -----------------------------------------------------------------
# 2. JOB DEFINITION
# -----------------------------------------------------------------
jobs:
  sshx_max_duration:
    name: Interactive Debug Shell (sshx)
    runs-on: ubuntu-latest
    
    # Kills the job after 6 hours (360 minutes) to comply with GitHub limits
    timeout-minutes: 360 

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: 1. Start SSHX and Capture Link
        id: sshx_setup # ID is needed to reference outputs in later steps
        run: |
          echo "Starting SSHX session in background..."
          
          # Start sshx in a detached/headless mode (necessary for background execution) 
          # and redirect all output (stdout and stderr) to a log file.
          curl -sSf https://sshx.io/get | sh -s run --headless > /tmp/sshx_link.log 2>&1 &
          SSHX_PID=$! # Capture the Process ID of the background job
          
          # Give the session a few seconds to start and print the URL to the log file
          sleep 10
          
          # Extract the URL from the log file using grep and awk
          # We search for the unique "Sharing session at:" line
          SSHX_URL=$(grep 'Sharing session at:' /tmp/sshx_link.log | awk '{print $NF}')
          
          # Check if a valid URL was captured and set it as a step output
          if [[ "$SSHX_URL" == "https://sshx.io/s/"* ]]; then
            echo "sshx_url=$SSHX_URL" >> $GITHUB_OUTPUT
            echo "Successfully captured SSHX URL."
          else
            echo "::error::Failed to capture sshx URL. Check /tmp/sshx_link.log for details."
            # Kill the background process and exit with an error
            kill $SSHX_PID
            exit 1
          fi

      - name: 2. Send URL to Discord Webhook
        # Only run this if the previous step succeeded and the URL was captured
        if: success() && steps.sshx_setup.outputs.sshx_url != ''
        env:
          URL: ${{ steps.sshx_setup.outputs.sshx_url }}
        run: |
          # Construct the JSON payload for Discord using the captured URL
          WEBHOOK_DATA='{
            "content": "**New SSHX Session Started!** ðŸš€",
            "embeds": [{
              "title": "Connect to Runner",
              "description": "The 6-hour high-resource debugging session has started. **RECONNECT NOW** to the new link.",
              "url": "${{ env.URL }}",
              "color": 3447003,
              "fields": [{
                "name": "Link",
                "value": "[Click to Connect](${{ env.URL }})",
                "inline": false
              }]
            }]
          }'
          
          # Use curl to send the payload to the secure Discord Webhook URL
          curl -H "Content-Type: application/json" \
               -d "$WEBHOOK_DATA" \
               ${{ secrets.DISCORD_WEBHOOK_URL }} # Uses the secret you created

      - name: 3. Keep Job Alive for Max Duration
        # This step blocks the workflow for ~6 hours until GitHub times it out.
        if: always() # Run even if the previous steps had a non-critical warning
        run: |
          echo "SSHX session is running in the background. Job will run for the full 6 hours."
          # Use `tail -f` to keep the job active by continuously monitoring the log file.
          # The job will terminate when the 6-hour limit is hit.
          tail -f /tmp/sshx_link.log
