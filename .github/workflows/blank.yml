jobs:
  sshx_max_duration:
    name: Interactive Debug Shell (sshx)
    runs-on: ubuntu-latest
    timeout-minutes: 360

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Start SSHX and Capture URL
        id: sshx_start
        shell: bash
        run: |
          echo "Starting SSHX session and capturing URL..."
          
          # Run the command and capture the full output
          OUTPUT=$(curl -sSf https://sshx.io/get | sh -s run &)

          # Extract the URL line, assuming it starts with '[sshx] Sharing session at:'
          SSHX_URL=$(echo "$OUTPUT" | grep 'Sharing session at:' | awk '{print $NF}')
          
          # Set the captured URL as an output variable for the next step to use
          echo "SSHX_URL=$SSHX_URL" >> $GITHUB_OUTPUT
          
          # Keep the session alive (This line ensures the job blocks/runs for 6 hours)
          # Note: The output capture above might break the blocking behavior.
          # A simpler, more reliable method is often used in a combined step (see next block).
          
          # *** A more robust approach combines the capture and execution:
          # Run the command, log the URL, and then run a background process to keep it alive
          
          # Re-run the command without capturing to ensure continuous running.
          # This part must be carefully managed to avoid race conditions. 
          # The recommended method is to use a custom script or action that handles both.
          
          # For a reliable solution, let's use a simpler command that guarantees capture AND execution:
          curl -sSf https://sshx.io/get | tee /tmp/sshx_output.txt | sh -s run &
          
          # Wait a few seconds for sshx to start and print the URL
          sleep 5
          
          # Extract URL from the temporary file
          SSHX_URL=$(grep 'Sharing session at:' /tmp/sshx_output.txt | awk '{print $NF}')
          echo "sshx_url=$SSHX_URL" >> $GITHUB_OUTPUT
          
          # Keep the job running indefinitely until timeout
          wait # This command will wait for the background 'sh -s run' process

      - name: Send URL to Discord
        # Only run this step if the previous step successfully captured a URL
        if: success() && steps.sshx_start.outputs.sshx_url != ''
        env:
          URL: ${{ steps.sshx_start.outputs.sshx_url }}
        run: |
          # Construct the JSON payload for Discord
          WEBHOOK_DATA='{
            "content": "**New SSHX Session Started!** ðŸš€",
            "embeds": [{
              "title": "Connect to Runner",
              "description": "The 6-hour high-resource debugging session has started. **RECONNECT NOW** to the new link.",
              "url": "${{ env.URL }}",
              "color": 3447003,
              "fields": [{
                "name": "Link",
                "value": "[Click to Connect](${{ env.URL }})",
                "inline": false
              }]
            }]
          }'
          
          # Send the payload to the Discord Webhook
          curl -H "Content-Type: application/json" \
               -d "$WEBHOOK_DATA" \
               ${{ secrets.DISCORD_WEBHOOK_URL }}
