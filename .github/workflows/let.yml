name: ðŸš€ 6-Hour SSHX Discord Notifier (Debian 13)

# -----------------------------------------------------------------
# 1. EVENT TRIGGERS (When the job runs)
# -----------------------------------------------------------------
on:
  schedule:
    # Runs at ~5.5 hour intervals to restart the session before the 6-hour limit.
    - cron: '30 0,5,11,16,22 * * *'
  # Allows manual triggering from the GitHub Actions tab.
  workflow_dispatch:

# -----------------------------------------------------------------
# 2. JOB DEFINITION
# -----------------------------------------------------------------
jobs:
  sshx_max_duration:
    name: Interactive Debug Shell (sshx)
    runs-on: ubuntu-latest
    timeout-minutes: 360 

    # ðŸš¨ DEBIAN EXECUTION ENVIRONMENT ðŸš¨
    container:
      image: debian:13
      options: --user root

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # ðŸš¨ FIX: Installing crucial network dependencies (iproute2, net-tools)
      - name: Install Dependencies and Supervisor
        run: |
          apt-get update
          # net-tools and iproute2 are often missing in minimal containers and needed for networking
          apt-get install -y curl gawk bash supervisor procps iproute2 net-tools

      # 1. Setup and Start SSHX via Supervisor
      - name: 1. Setup and Start SSHX via Supervisor
        id: setup_sshx
        shell: bash
        run: |
          echo "Setting up SSHX service..."
          
          # 1. Download and install sshx
          curl -sSf -L https://sshx.io/get -o /usr/local/bin/sshx
          chmod +x /usr/local/bin/sshx
          
          # 2. Define the service configuration
          SSHX_LOG_FILE="/tmp/sshx_supervisor.log"
          CONFIG_FILE="/etc/supervisor/conf.d/sshx.conf"
          
          echo "[program:sshx]" > $CONFIG_FILE
          echo "command=/usr/local/bin/sshx run --headless" >> $CONFIG_FILE
          echo "autostart=true" >> $CONFIG_FILE
          echo "autorestart=true" >> $CONFIG_FILE
          echo "user=root" >> $CONFIG_FILE
          echo "stdout_logfile=$SSHX_LOG_FILE" >> $CONFIG_FILE
          echo "stderr_logfile=$SSHX_LOG_FILE" >> $CONFIG_FILE
          
          # 3. Start the supervisor and the sshx service
          service supervisor start
          supervisorctl reread
          supervisorctl update
          
          # Wait a moment and confirm the process is running
          sleep 5
          if supervisorctl status sshx | grep -q "RUNNING"; then
              echo "SSHX process confirmed running."
          else
              echo "::error::SSHX process failed to start under Supervisor."
              echo "Supervisor Status:"
              supervisorctl status
              exit 1
          fi

          echo "SSHX service is starting. Logs are at $SSHX_LOG_FILE"
          echo "sshx_log_file=$SSHX_LOG_FILE" >> $GITHUB_OUTPUT

      # 2. Wait for and Extract URL (Polling)
      - name: 2. Wait for and Extract URL (Polling)
        id: extract_url
        shell: bash
        run: |
          SSHX_LOG="${{ steps.setup_sshx.outputs.sshx_log_file }}"
          TIMEOUT=60 # Max time to wait for URL
          
          echo "Polling supervisor log for URL (max $TIMEOUT seconds)..."
          
          for i in $(seq 1 $TIMEOUT); do
            # Extract the URL from the supervisor log (get the last match)
            SSHX_URL=$(grep 'Sharing session at:' "$SSHX_LOG" | gawk '{print $NF}' | tail -n 1)
            
            if [ -n "$SSHX_URL" ] && [[ "$SSHX_URL" == "https://sshx.io/s/"* ]]; then
              echo "URL found after $i seconds."
              break
            fi
            sleep 1
          done
          
          # Final Validation and Output
          if [ -n "$SSHX_URL" ] && [[ "$SSHX_URL" == "https://sshx.io/s/"* ]]; then
            echo "sshx_url=$SSHX_URL" >> $GITHUB_OUTPUT
            echo "::notice::Successfully captured SSHX URL: $SSHX_URL"
          else
            echo "::error::Failed to capture sshx URL after $TIMEOUT seconds. Final log content is below."
            echo "--- $SSHX_LOG content for final debug ---"
            cat "$SSHX_LOG"
            echo "-------------------------------------------"
            exit 1 # This is why your job is failing! The URL isn't there.
          fi

      # 3. Send URL to Discord Webhook
      - name: 3. Send URL to Discord Webhook
        if: success() && steps.extract_url.outputs.sshx_url != ''
        env:
          SSHX_URL: ${{ steps.extract_url.outputs.sshx_url }}
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          WEBHOOK_DATA='{
            "content": "**New SSHX Session Started!** ðŸš€",
            "embeds": [{
              "title": "Connect to Runner",
              "description": "The 6-hour high-resource debugging session has started. **RECONNECT NOW** to the new link.",
              "url": "${{ env.SSHX_URL }}",
              "color": 3447003,
              "fields": [
                {
                  "name": "SSHX Link",
                  "value": "[Click to Connect](${{ env.SSHX_URL }})",
                  "inline": false
                },
                {
                  "name": "Run Workflow Link",
                  "value": "[View Job Logs](${{ env.RUN_URL }})",
                  "inline": false
                }
              ]
            }]
          }'
          
          curl -H "Content-Type: application/json" \
               -d "$WEBHOOK_DATA" \
               ${{ secrets.DISCORD_WEBHOOK_URL }}

      # 4. Keep Job Alive for Max Duration
      - name: 4. Keep Job Alive for Max Duration
        if: success() 
        run: |
          echo "SSHX session is running and managed by Supervisor. Job will run for the full 6 hours."
          tail -f /tmp/sshx_supervisor.log
