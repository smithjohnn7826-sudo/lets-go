name: ðŸš€ 6-Hour SSHX Discord Notifier

# -----------------------------------------------------------------
# ðŸš¨ THIS 'ON:' BLOCK MUST BE PRESENT TO FIX THE ANNOTATION ERROR ðŸš¨
# -----------------------------------------------------------------
on:
  # 1. Schedule Trigger (Runs automatically before the 6-hour limit)
  schedule:
    # Runs at 30 minutes past 0, 5, 11, 16, and 22 o'clock UTC
    - cron: '30 0,5,11,16,22 * * *'
    
  # 2. Manual Trigger (Allows you to start the job from the GitHub Actions tab)
  workflow_dispatch:

# -----------------------------------------------------------------
# 2. JOB DEFINITION (The logic to start sshx and send the link)
# -----------------------------------------------------------------
jobs:
  sshx_max_duration:
    name: Interactive Debug Shell (sshx)
    runs-on: ubuntu-latest
    timeout-minutes: 360 

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: 1. Start SSHX and Capture Link
        id: sshx_setup 
        run: |
          echo "Starting SSHX session in background..."
          
          # Start sshx in headless mode and redirect all output to a log file.
          curl -sSf https://sshx.io/get | sh -s run --headless > /tmp/sshx_link.log 2>&1 &
          SSHX_PID=$!
          
          # Wait for the URL to be generated
          sleep 10
          
          # Extract the URL from the log file
          SSHX_URL=$(grep 'Sharing session at:' /tmp/sshx_link.log | awk '{print $NF}')
          
          # Check and set the output variable
          if [[ "$SSHX_URL" == "https://sshx.io/s/"* ]]; then
            echo "sshx_url=$SSHX_URL" >> $GITHUB_OUTPUT
            echo "Successfully captured SSHX URL."
          else
            echo "::error::Failed to capture sshx URL. Check /tmp/sshx_link.log for details."
            kill $SSHX_PID
            exit 1
          fi

      - name: 2. Send URL to Discord Webhook
        # Uses the output from the previous step
        if: success() && steps.sshx_setup.outputs.sshx_url != ''
        env:
          URL: ${{ steps.sshx_setup.outputs.sshx_url }}
        run: |
          WEBHOOK_DATA='{
            "content": "**New SSHX Session Started!** ðŸš€",
            "embeds": [{
              "title": "Connect to Runner",
              "description": "The 6-hour high-resource debugging session has started. **RECONNECT NOW** to the new link.",
              "url": "${{ env.URL }}",
              "color": 3447003,
              "fields": [{
                "name": "Link",
                "value": "[Click to Connect](${{ env.URL }})",
                "inline": false
              }]
            }]
          }'
          
          # Send the notification using the repository secret
          curl -H "Content-Type: application/json" \
               -d "$WEBHOOK_DATA" \
               ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: 3. Keep Job Alive for Max Duration
        if: always() 
        run: |
          echo "SSHX session is running in the background. Job will run for the full 6 hours."
          # This command blocks until the GitHub runner hits the timeout limit.
          tail -f /tmp/sshx_link.log
