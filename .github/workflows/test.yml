name: ðŸš€ 6-Hour SSHX Discord Notifier (Debian 13)

# -----------------------------------------------------------------
# 1. EVENT TRIGGERS (When the job runs)
# -----------------------------------------------------------------
on:
  # Schedule: Runs automatically to restart the session before the 6-hour limit.
  schedule:
    # Runs at 30 minutes past 0, 5, 11, 16, and 22 o'clock UTC (~5.5 hour intervals)
    - cron: '30 0,5,11,16,22 * * *'
    
  # Manual: Allows you to start the job instantly from the Actions tab.
  workflow_dispatch:

# -----------------------------------------------------------------
# 2. JOB DEFINITION
# -----------------------------------------------------------------
jobs:
  sshx_max_duration:
    name: Interactive Debug Shell (sshx)
    runs-on: ubuntu-latest # The host runner remains Ubuntu for stability
    timeout-minutes: 360 

    # ðŸš¨ DEBIAN CONTAINER CONFIGURATION ðŸš¨
    # This instructs the job to run all steps inside the specified Debian image.
    container:
      image: debian:13 # Uses the latest Debian stable release: Debian 13 "Trixie"
      options: --user root # Necessary for installing packages and running as root

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # Install curl and procps (for 'kill'), as minimal Debian images may lack them
      - name: Install Dependencies
        run: |
          apt-get update
          apt-get install -y curl procps

      - name: 1. Start SSHX and Capture Link (Robust Version)
        id: sshx_setup 
        run: |
          echo "Starting SSHX session and capturing URL..."
          
          # Run the command in the background, redirecting output to a log file.
          (curl -sSf https://sshx.io/get | sh -s run --headless) > /tmp/sshx_link.log 2>&1 &
          SSHX_PID=$!
          
          # Wait 15 seconds for the sshx service to fully initialize
          sleep 15
          
          # Check if the log file was created
          if [ ! -f /tmp/sshx_link.log ]; then
              echo "::error::Log file was not created. SSHX may have failed immediately."
              exit 1
          fi
          
          # Extract the URL. The $NF (Net Field) is the URL itself.
          SSHX_URL=$(grep 'Sharing session at:' /tmp/sshx_link.log | awk '{print $NF}')
          
          # Validate and set the output.
          if [[ "$SSHX_URL" == "https://sshx.io/s/"* ]]; then
            echo "sshx_url=$SSHX_URL" >> $GITHUB_OUTPUT
            echo "Successfully captured SSHX URL: $SSHX_URL"
          else
            echo "::error::Failed to capture sshx URL."
            echo "--- /tmp/sshx_link.log content for debug ---"
            cat /tmp/sshx_link.log # Print log for debugging the failure
            echo "-------------------------------------------"
            # Ensure we kill the background process if it failed to get the URL
            kill $SSHX_PID 2>/dev/null
            exit 1
          fi

      - name: 2. Send URL to Discord Webhook
        # Only runs if the previous step successfully provided a link
        if: success() && steps.sshx_setup.outputs.sshx_url != ''
        env:
          URL: ${{ steps.sshx_setup.outputs.sshx_url }}
        run: |
          WEBHOOK_DATA='{
            "content": "**New SSHX Session Started!** ðŸš€",
            "embeds": [{
              "title": "Connect to Runner",
              "description": "The 6-hour high-resource debugging session has started. **RECONNECT NOW** to the new link.",
              "url": "${{ env.URL }}",
              "color": 3447003,
              "fields": [{
                "name": "Link",
                "value": "[Click to Connect](${{ env.URL }})",
                "inline": false
              }]
            }]
          }'
          
          # Use the securely stored secret to send the notification
          curl -H "Content-Type: application/json" \
               -d "$WEBHOOK_DATA" \
               ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: 3. Keep Job Alive for Max Duration
        # Must run for the full 6 hours to keep the SSHX session alive.
        if: success() 
        run: |
          echo "SSHX session is running in the background. Job will run for the full 6 hours."
          # This command monitors the log file and prevents GitHub from timing out the job.
          tail -f /tmp/sshx_link.log
